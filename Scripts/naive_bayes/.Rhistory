geom_bar(stat="identity", width=0.7, fill="steelblue") +
xlab('Days') + ylab('Count') +
geom_line(20)
# Картинка для динамики сообщений
ggplot(df, aes(x=1:length(y), y=message_cnt))+
geom_bar(stat="identity", width=0.7, fill="steelblue") +
xlab('Days') + ylab('Count') +
geom_line(aes(x=1:length(y), y=20))
# Картинка для динамики сообщений
ggplot(df, aes(x=1:length(y), y=message_cnt))+
geom_bar(stat="identity", width=0.7, fill="steelblue") +
xlab('Days') + ylab('Count') +
geom_line(aes(x=1:length(y), y=20,fill='red'))
# Картинка для динамики сообщений
ggplot(df, aes(x=1:length(y), y=message_cnt))+
geom_bar(stat="identity", width=0.7, fill="steelblue") +
xlab('Days') + ylab('Count') +
geom_line(aes(x=1:length(y), y=20, col='red'))
# Картинка для динамики сообщений
ggplot(df, aes(x=1:length(y), y=message_cnt))+
geom_bar(stat="identity", width=0.7, fill="steelblue") +
xlab('Days') + ylab('Count') +
geom_line(aes(x=1:length(y), y=20),col='red')
# Картинка для динамики сообщений
ggplot(df, aes(x=1:length(y), y=message_cnt))+
geom_bar(stat="identity", width=0.7, fill="steelblue") +
xlab('Days') + ylab('Count') +
geom_line(aes(x=1:length(y), y=20,width=0.7),col='red')
mean(y[1:45])
# Картинка для динамики сообщений
ggplot(df, aes(x=1:length(y), y=message_cnt))+
geom_bar(stat="identity", width=0.7, fill="steelblue") +
xlab('Days') + ylab('Count') +
geom_line(aes(x=1:45, y=mean(y[1:45]),width=0.7),col='red') +
geom_line(aes(x=45:length(y), y=mean(y[45:length(y)]),width=0.7),col='red')
# Картинка для динамики сообщений
ggplot(df, aes(x=1:length(y), y=message_cnt))+
geom_bar(stat="identity", width=0.7, fill="steelblue") +
xlab('Days') + ylab('Count') +
geom_line(aes(x=1:45, y=mean(y[1:45]),width=0.7),col='red') +
geom_line(aes(x=45:length(y), y=mean(y[45:length(y)]),width=0.7),col='red')
mean(y[45:length(y)]
mean(y[45:length(y)]
mean(y[45:length(y)])
# Картинка для динамики сообщений
ggplot(df, aes(x=1:length(y), y=message_cnt))+
geom_bar(stat="identity", width=0.7, fill="steelblue") +
xlab('Days') + ylab('Count') +
geom_line(aes(x=1:45, y=mean(y[1:45])),col='red') +
geom_line(aes(x=45:length(y), y=mean(y[45:length(y)])),col='red')
# Картинка для динамики сообщений
ggplot(df, aes(x=1:length(y), y=message_cnt))+
geom_bar(stat="identity", width=0.7, fill="steelblue") +
xlab('Days') + ylab('Count') +
geom_line(aes(x=1:45, y=mean(y[1:45])),col='red')
# Картинка для динамики сообщений
ggplot(df, aes(x=1:length(y), y=message_cnt))+
geom_bar(stat="identity", width=0.7, fill="steelblue") +
xlab('Days') + ylab('Count') +
geom_line(aes(x=1:45, y=mean(y[1:45])),col='red')
geom_line(aes(x=1:45, y=20,col='red')
# Картинка для динамики сообщений
ggplot(df, aes(x=1:length(y), y=message_cnt))+
xlab('Days') + ylab('Count') +
# Картинка для динамики сообщений
ggplot(df, aes(x=1:length(y), y=message_cnt))+
ggplot(df, aes(x=1:length(y), y=message_cnt))+
geom_bar(stat="identity", width=0.7, fill="steelblue") +
xlab('Days') + ylab('Count') +
geom_line(aes(x=1:45, y=20,col='red'))
y
y <- df$message_cnt
# Картинка для динамики сообщений
ggplot(df, aes(x=1:length(y), y=message_cnt))+
geom_bar(stat="identity", width=0.7, fill="steelblue") +
xlab('Days') + ylab('Count') +
geom_line(aes(x=1:45, y=20,col='red'))
# Картинка для динамики сообщений
ggplot(df, aes(x=1:length(y), y=message_cnt))+
geom_bar(stat="identity", width=0.7, fill="steelblue") +
xlab('Days') + ylab('Count') +
geom_line(aes(x=1:45, y=20))
# Картинка для динамики сообщений
ggplot(df, aes(x=1:length(y), y=message_cnt))+
geom_bar(stat="identity", width=0.7, fill="steelblue") +
xlab('Days') + ylab('Count') +
geom_line(data.frame(x=1:45, z=20), aes(x=x, y=z))
length(y) - 45
# Картинка для динамики сообщений
ggplot(df, aes(x=1:length(y), y=message_cnt))+
geom_bar(stat="identity", width=0.7, fill="steelblue") +
xlab('Days') + ylab('Count') +
geom_line(aes(x=1:length(y), y=c(rep(mean(y[1:45]),45),rep(NaN,29))),col='red')
# Картинка для динамики сообщений
ggplot(df, aes(x=1:length(y), y=message_cnt))+
geom_bar(stat="identity", width=0.7, fill="steelblue") +
xlab('Days') + ylab('Count') +
geom_line(aes(x=1:length(y), y=c(rep(mean(y[1:45]),45),rep(NaN,29))),col='red')  +
geom_line(aes(x=1:length(y), y=c(rep(NaN,45),rep(mean(y[1:45]),29))),col='red')
# Картинка для динамики сообщений
ggplot(df, aes(x=1:length(y), y=message_cnt))+
geom_bar(stat="identity", width=0.7, fill="steelblue") +
xlab('Days') + ylab('Count') +
geom_line(aes(x=1:length(y), y=c(rep(mean(y[1:45]),45),rep(NaN,29))),col='red')  +
geom_line(aes(x=1:length(y), y=c(rep(NaN,45),rep(mean(y[45:length(y)]),29))),col='red')
# Картинка для динамики сообщений
ggplot(df, aes(x=1:length(y), y=message_cnt))+
geom_bar(stat="identity", width=0.7, fill="steelblue") +
xlab('Days') + ylab('Count') +
geom_line(aes(x=1:length(y), y=c(rep(mean(y[1:45]),45),rep(NaN,29))),col='red',size=1)  +
geom_line(aes(x=1:length(y), y=c(rep(NaN,45),rep(mean(y[45:length(y)]),29))),col='red',size=1)
rstan:::rstudio_stanc("poisson_shift.stan")
rstan:::rstudio_stanc("poisson_shift.stan")
rstan:::rstudio_stanc("~/Documents/bayes_book/itog_scripts/coins/coins.stan")
library(rstan)
library(bayesplot)
model <- stan_model(file = "coins.stan")
setwd("~/Documents/bayes_book/itog_scripts/coins")
model <- stan_model(file = "coins.stan")
# В списке переменные надо называть точно также как и в STAN
df <- list(N = length(y), y <- c(1, 1, 1, 1, 0, 1, 1))
# Получаем выборку из апостериорных распределений:
fit <- sampling(model, data = df)
# В списке переменные надо называть точно также как и в STAN
df <- list(N = 7, y <- c(1, 1, 1, 1, 0, 1, 1))
# Получаем выборку из апостериорных распределений:
fit <- sampling(model, data = df)
# Посмотрим на наш fit
fit
y = extract(fit)
y
y = extract(myfit)
hist(y)
p = extract(fit)
hist(p)
p
p[1:10]
p
p = extract(fit)$p
hist(p)
p = extract(fit)$y_new
hist(p)
library(ggplot2)
qplot(p)
p = extract(fit)$p
qplot(p)
# визуализируем всё это дело
fit_array = as.array(fit)
mcmc_hist(fit_array)
# И ещё один красивый рисунок!
mcmc_trace(fit_array)
library("shinystan")
launch_shinystan(fit)
df_train <- read.csv("spam_train.csv")
df_test <- read.csv("spam_test.csv")
setwd("~/Documents/bayes_book/itog_scripts/naive_bayes")
df_train <- read.csv("spam_train.csv")
df_test <- read.csv("spam_test.csv")
df_test
View(df_train)
for(i in 1:nrow(df_test)){
for(j in 1:ncol(df_test)){
if(df_test[i,j] > 0){
df_test[i,j] = 1
}
}
}
df_test
View(df_test)
View(df_train)
for(i in 1:nrow(df_train)){
for(j in 1:ncol(df_train)){
if(df_train[i,j] > 0){
df_train[i,j] = 1
}
}
}
write.csv(df_train, "spam_train.csv")
write.csv(df_test, "spam_test.csv")
df_train <- read.csv("spam_train.csv")
df_test <- read.csv("spam_test.csv")
df_train
n_col = ncol(df_train) - 1
n_row = nrow(df_train)
df_train[,n_col + 1]
df_train[df_train[,n_col + 1] == 1]
df_train[df_train[,n_col + 1] == 1,]
sum(df_train[df_train[,n_col + 1] == 1,])
sum(df_train[df_train[,n_col + 1] == 1,],1)
sum(df_train[df_train[,n_col + 1] == 1,],0)
x <- matrix(c(1,1,0,0),nrow=2)
x
colSums(x)
colSums(df_train[df_train[,n_col + 1] == 1,])
colSums(df_train[df_train[,n_col + 1] == 1,])[1:n_col]
colSums(df_train[df_train[,n_col + 1] == 1,])[1:n_col]/n_row
words_freq <- colSums(df_train[df_train[,n_col + 1] == 1,])[1:n_col]/n_row
words_freq
df_test[0]
df_test[1,]
names(df_test[1,])
names(df_test[1,])[1]
names(df_test[1,])[2]
words_freq[[names(df_test[1,])[2]]]
names(df_test[1,])[1]
names(df_test[1,])[2]
View(df_test)
n_row
View(df_train)
names(df_test[1,])[2]
words_freq[[names(df_test[1,])[2]]]
words_freq[[names(df_test[1,])[2]]]*
df_test[1,]
words_freq[[names(df_test[1,])[2]]]*
df_test[1,] > 0
words_freq[[names(df_test[1,])[2]]]*
df_test[1,][df_test[1,] > 0]
words_freq[[names(df_test[1,])[2]]]*
df_test[1,][df_test[1,] > 0]
words_freq[[names(df_test[1,])[2]]]*
names(df_test[1,][df_test[1,] > 0])
words_freq[[names(df_test[1,])[2]]]*
names(df_test[1,][df_test[1,] > 0])
words_freq[[names(df_test[1,])[2]]]*
df_test[1,][df_test[1,] > 0]
words_freq[[names(df_test[1,])[2]]]*
df_test[df_test[1,] > 0][1,]
words_freq[[names(df_test[1,])[2]]]*
df_test[df_test[1,] > 0]
words_freq[[names(df_test[1,])[2]]]*
df_test
words_freq[[names(df_test[1,])[2]]]*
names(df_test)
names(df_test)
names(df_test)[df_test[1,] > 0]
words_freq[[names(df_test)[df_test[1,] > 0]]]
words_freq[[names(df_test)[df_test[1,] > 0]]
words_freq[[names(df_test)[df_test[1,] > 0]]
]
words_freq[names(df_test)[df_test[1,] > 0]]
words_freq[names(df_test[1,])[2]]
words_freq[names(df_test)[df_test[1,] > 0]]
prod(words_freq[names(df_test)[df_test[1,] > 0]])
prod(words_freq[names(df_test)[df_test[1,] > 0]])
prod(words_freq[names(df_test)[df_test[1,] > 0]])
prod(words_freq[names(df_test)[df_test[] > 0]])
prod(words_freq[names(df_test)[df_test > 0]])
forecasts = c()
for(i in 1: nrow(df_test)){
spam = prod(words_freq[names(df_test)[df_test[1,] > 0]])*p_spam
ham = prod(words_freq[names(df_test)[1 - df_test[1,] > 0]])*(1-p_spam)
if(spam > ham){
forecast = append(forecast,1)
}else{
forecast = append(forecast,0)
}
}
n_col = ncol(df_train) - 1
n_row = nrow(df_train)
p_spam = 0.5
forecasts = c()
for(i in 1: nrow(df_test)){
spam = prod(words_freq[names(df_test)[df_test[1,] > 0]])*p_spam
ham = prod(words_freq[names(df_test)[1 - df_test[1,] > 0]])*(1-p_spam)
if(spam > ham){
forecast = append(forecast,1)
}else{
forecast = append(forecast,0)
}
}
for(i in 1: nrow(df_test)){
spam = prod(words_freq[names(df_test)[df_test[1,] > 0]])*p_spam
ham = prod(words_freq[names(df_test)[1 - df_test[1,] > 0]])*(1-p_spam)
if(spam > ham){
forecasts = append(forecasts,1)
}else{
forecasts = append(forecasts,0)
}
}
forecasts
for(i in 1: nrow(df_test)){
spam = prod(words_freq[names(df_test)[df_test[i,] > 0]])*p_spam
ham = prod(words_freq[names(df_test)[1 - df_test[i,] > 0]])*(1-p_spam)
if(spam > ham){
forecasts = append(forecasts,1)
}else{
forecasts = append(forecasts,0)
}
}
forecasts = c()
for(i in 1: nrow(df_test)){
spam = prod(words_freq[names(df_test)[df_test[i,] > 0]])*p_spam
ham = prod(words_freq[names(df_test)[1 - df_test[i,] > 0]])*(1-p_spam)
if(spam > ham){
forecasts = append(forecasts,1)
}else{
forecasts = append(forecasts,0)
}
}
forecasts
rstan:::rstudio_stanc("naive_bayes.stan")
rstan:::rstudio_stanc("naive_bayes.stan")
rstan:::rstudio_stanc("naive_bayes.stan")
rstan:::rstudio_stanc("naive_bayes.stan")
rstan:::rstudio_stanc("naive_bayes.stan")
df_train <- read.csv("spam_train.csv")
View(df_train)
rstan:::rstudio_stanc("naive_bayes.stan")
rstan:::rstudio_stanc("naive_bayes.stan")
rstan:::rstudio_stanc("naive_bayes.stan")
rstan:::rstudio_stanc("naive_bayes.stan")
rstan:::rstudio_stanc("naive_bayes.stan")
rstan:::rstudio_stanc("naive_bayes.stan")
df_train <- read.csv("spam_train.csv")
df_test <- read.csv("spam_test.csv")
n_col = ncol(df_train) - 1
n_row = nrow(df_train)
p_spam = 0.5
1
words_freq <- colSums(df_train[df_train[,1] == 1,])[1:n_col]/n_row
words_freq
df_train <- read.csv("spam_train.csv")
df_test <- read.csv("spam_test.csv")
n_col = ncol(df_train)
n_row = nrow(df_train)
p_spam = 0.5
words_freq <- colSums(df_train[df_train[,1] == 1,])[1:n_col]/n_row
words_freq
words_freq[names(df_test[1,])[2]]
forecasts = c()
for(i in 1: nrow(df_test)){
spam = prod(words_freq[names(df_test)[df_test[i,] > 0]])*p_spam
ham = prod(words_freq[names(df_test)[1 - df_test[i,] > 0]])*(1-p_spam)
if(spam > ham){
forecasts = append(forecasts,1)
}else{
forecasts = append(forecasts,0)
}
}
forecasts
# сделали срез по всем сообщениям со спамом и нашли сумму по столбцам
words_spam_freq <- colSums(df_train[df_train[,1] == 1,])
# избавились от столбца с ответами и поделили на число спамных строк
words_spam_freq <- words_spam_freq[2:n_col]/n_row
# избавились от столбца с ответами и поделили на число спамных строк
words_spam_freq <- words_spam_freq[2:n_col]/sum(df_train[,1] == 1)
words_freq[names(df_test[1,])[2]]
# Прогноз для первого письма из тестовой выборки
words_freq[names(df_test[1,2:ncol])[1]]
df_test[1,]
df_test[1,2]
df_test[1,2:ncol]
ncol
# Прогноз для первого письма из тестовой выборки
words_freq[names(df_test[1,2:n_col])[1]]
df_test[1,2:n_col]
names(df_test[1,2:n_col]
)
names(df_test[1,2:n_col])[1]
names(df_test[1,2:n_col])[1]   # выдаст имя первой колонки, то есть слово,
# выдаст P(w_i | spam) для этого слова
words_freq[names(df_test[1,,2:n_col])[1]]
# выдаст P(w_i | spam) для этого слова
words_freq[names(df_test[1,2:n_col])[1]]
# найдём P(text | spam)*P(spam)
spam = prod(words_freq[names(df_test)[df_test[1,] > 0]])*p_spam
spam
# найдём P(text | spam)*P(spam)
spam = prod(words_freq[names(df_test)[df_test[1,2:n_col] > 0]])*p_spam
spam
names(df_test)[df_test[1,2:n_col] > 0]
words_freq[names(df_test)[df_test[1,2:n_col] > 0]]
prod(words_freq[names(df_test)[df_test[1,2:n_col] > 0]])
prod(words_freq[names(df_test)[df_test[1,2:n_col] > 0]])*p_spam
ham = prod(1 - words_freq[names(df_test)[df_test[1,] > 0]])*(1 -p_spam)
ham
# найдём P(text | spam)*P(spam)
spam = prod(words_freq[names(df_test[,2:n_col])[df_test[1,2:n_col] > 0]])*p_spam
spam
# найдём P(text | ham)*P(ham)
ham = prod(1 - words_freq[names(df_test[,2:n_col])[df_test[1,2:n_col] > 0]])*(1 -p_spam)
ham
spam
ham
df_test[1,1]
spam > ham
forecasts = c()
for(i in 1: nrow(df_test)){
spam = prod(words_freq[names(df_test[,2:n_col])[df_test[i,2:n_col] > 0]])*p_spam
ham = prod(1 - words_freq[names(df_test[,2:n_col])[df_test[i,2:n_col] > 0]])*(1 -p_spam)
if(spam > ham){
forecasts = append(forecasts,1)
}else{
forecasts = append(forecasts,0)
}
}
forecasts
# найдём P(text | ham)*P(ham)
ham = prod(1 - words_freq[names(df_test[,2:n_col])[df_test[1,2:n_col] == 0]])*(1 -p_spam)
ham
ham
spam
words_freq[names(df_test[,2:n_col])[df_test[1,2:n_col] > 0]
]
words_freq
words_spam_freq
words_freq
words_spam_freq
# сделали срез по всем сообщениям со спамом и нашли сумму по столбцам
words_spam_freq <- colSums(df_train[df_train[,1] == 1,])
words_spam_freq
sum(df_train[,1] == 1)
words_spam_freq
words_spam_freq[2:n_col]
# избавились от столбца с ответами и поделили на число спамных строк
words_spam_freq <- words_spam_freq[2:n_col]/sum(df_train[,1] == 1)
words_spam_freq
ords_freq[names(df_test[1,2:n_col])[1]]
words_spam_freq[names(df_test[1,2:n_col])[1]]
df_test[1,2:n_col] > 0
names(df_test[,2:n_col])[df_test[1,2:n_col] > 0]
# найдём P(text | spam)*P(spam)
spam = prod(words_spam_freq[names(df_test[,2:n_col])[df_test[1,2:n_col] > 0]])*p_spam
spam
# найдём P(text | ham)*P(ham)
ham = prod(1 - words_freq[names(df_test[,2:n_col])[df_test[1,2:n_col] > 0]])*(1 -p_spam)
# найдём P(text | ham)*P(ham)
ham = prod(1 - words_spam_freq[names(df_test[,2:n_col])[df_test[1,2:n_col] > 0]])*(1 -p_spam)
ham
df_test[,2:n_col])[df_test[1,2:n_col] > 0
names(df_test[,2:n_col])[df_test[1,2:n_col] > 0
)
df_test[,2:n_col])[df_test[1,2:n_col] > 0]]
names(df_test[,2:n_col])[df_test[1,2:n_col] > 0]
words_spam_freq[names(df_test[,2:n_col])[df_test[1,2:n_col] > 0]]
1 - words_spam_freq[names(df_test[,2:n_col])[df_test[1,2:n_col]
prod(1 - words_spam_freq[names(df_test[,2:n_col])[df_test[1,2:n_col] < 1]])
prod(1 - words_spam_freq[names(df_test[,2:n_col])[df_test[1,2:n_col] < 1]])
# найдём P(text | ham)*P(ham)
ham = prod(1 - words_spam_freq[names(df_test[,2:n_col])[df_test[1,2:n_col] < 1]])*(1 -p_spam)
ham
df_test[1,1]  # в реальности сообщение спам
spam > ham    # а в прогнозе нет =(
spam
words_spam_freq[names(df_test[,2:n_col])[df_test[1,2:n_col] < 1]]
1 - words_spam_freq[names(df_test[,2:n_col])[df_test[1,2:n_col] < 1]]
# сделали то же самое с неспамными словами
words_ham_freq <- colSums(df_train[df_train[,1] == 0,])
words_ham_freq <- words_spam_freq[2:n_col]/sum(df_train[,1] == 0)
words_ham_freq
words_ham_freq + words_spam_freq
# сделали срез по всем сообщениям со спамом и нашли сумму по столбцам
words_spam_freq <- colSums(df_train[df_train[,1] == 1,])
# избавились от столбца с ответами и поделили на число спамных строк
words_spam_freq <- words_spam_freq[2:n_col]/sum(df_train[,1] == 1)
# сделали то же самое с неспамными словами
words_ham_freq <- colSums(df_train[df_train[,1] == 0,])
words_ham_freq <- words_spam_freq[2:n_col]/sum(df_train[,1] == 0)
sum(df_train[,1] == 0)
# сделали то же самое с неспамными словами
words_ham_freq <- colSums(df_train[df_train[,1] == 0,])
words_ham_freq
words_ham_freq <- words_spam_freq[2:n_col]/sum(df_train[,1] == 0)
words_ham_freq
# сделали то же самое с неспамными словами
words_ham_freq <- colSums(df_train[df_train[,1] == 0,])
words_ham_freq
sum(df_train[,1] == 0)
# сделали то же самое с неспамными словами
words_ham_freq <- colSums(df_train[df_train[,1] == 0,])
words_ham_freq <- words_ham_freq[2:n_col]/sum(df_train[,1] == 0)
words_ham_freq
names(df_test[1,2:n_col])[1]   # выдаст имя первой колонки, то есть слово,
# выдаст P(w_i | spam) для этого слова
words_spam_freq[names(df_test[1,2:n_col])[1]]
# найдём P(text | spam)*P(spam)
spam = prod(words_spam_freq[names(df_test[,2:n_col])[df_test[1,2:n_col] > 0]])*p_spam
# найдём P(text | spam)*P(spam)
spam = prod(words_spam_freq[names(df_test[,2:n_col])[df_test[1,2:n_col] > 0]])*p_spam
spam
# найдём P(text | ham)*P(ham)
ham = prod(words_ham_freq[names(df_test[,2:n_col])[df_test[1,2:n_col] > 0]])*(1 -p_spam)
ham
df_test[1,1]  # в реальности сообщение спам
spam > ham    # а в прогнозе нет =(
forecasts = c()
for(i in 1: nrow(df_test)){
spam = prod(words_freq[names(df_test[,2:n_col])[df_test[i,2:n_col] > 0]])*p_spam
ham = prod(1 - words_freq[names(df_test[,2:n_col])[df_test[i,2:n_col] > 0]])*(1 -p_spam)
if(spam > ham){
forecasts = append(forecasts,1)
}else{
forecasts = append(forecasts,0)
}
}
forecasts = c()
for(i in 1: nrow(df_test)){
spam = prod(words_freq[names(df_test[,2:n_col])[df_test[i,2:n_col] > 0]])*p_spam
ham = prod(words_ham_freq[names(df_test[,2:n_col])[df_test[i,2:n_col] > 0]])*(1 -p_spam)
if(spam > ham){
forecasts = append(forecasts,1)
}else{
forecasts = append(forecasts,0)
}
}
forecasts
df[,1]
df_test[,1]
df_test[,1] == forecasts
sum(df_test[,1] == forecasts)/length(forecasts)
sum(df_test[,1] == 1)/length(forecasts)
sum(df_test[,1] == 0)/length(forecasts)

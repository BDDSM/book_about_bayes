# Получаем выборку из апостериорных распределений:
fit <- sampling(model, data = df)
library(rstan)
system('clang++ -v')
install.packages("rstan", repos = "https://cloud.r-project.org", dependencies = TRUE)
fx <- inline::cxxfunction( signature(x = "integer", y = "numeric" ) , '
return ScalarReal( INTEGER(x)[0] * REAL(y)[0] ) ;
' )
fx( 2L, 5 ) # должно получиться 10
library(rstan)
library(bayesplot)
model <- stan_model(file = "coins.stan")
# В списке переменные надо называть точно также как и в STAN
df <- list(N = 2, y <- c(1, 1, 1, 1, 0, 1, 1))
# Получаем выборку из апостериорных распределений:
fit <- sampling(model, data = df)
# Посмотрим на наш fit
fit
model <- stan_model(file = "coins.stan")
# В списке переменные надо называть точно также как и в STAN
df <- list(N = 2, y <- c(1, 1, 1, 1, 0, 1, 1))
# Получаем выборку из апостериорных распределений:
fit <- sampling(model, data = df)
# В списке переменные надо называть точно также как и в STAN
df <- list(N = 7, y <- c(1, 1, 1, 1, 0, 1, 1))
# Получаем выборку из апостериорных распределений:
fit <- sampling(model, data = df)
# Посмотрим на наш fit
fit
library('xtable')
xtable(fit)
fit
summary(fit)
xtable(summary(fit))
model <- stan_model(file = "coins.stan")
# В списке переменные надо называть точно также как и в STAN
df <- list(N = 7, y <- c(1, 1, 1, 1, 0, 1, 1))
# Получаем выборку из апостериорных распределений:
fit <- sampling(model, data = df)
# Посмотрим на наш fit
fit
# визуализируем всё это дело
fit_array = as.array(fit)
mcmc_hist(fit_array)
# В списке переменные надо называть точно также как и в STAN
df <- list(N = 7, y <- c(1, 1, 1, 1, 0, 1, 1))
# Получаем выборку из апостериорных распределений:
fit <- sampling(model, data = df)
# Посмотрим на наш fit
fit
# визуализируем всё это дело
fit_array = as.array(fit)
mcmc_hist(fit_array)
# И ещё один красивый рисунок!
mcmc_trace(fit_array)
shiny_stan_object <- launch_shinystan(fit)
# визуализируем всё это дело
fit_array = as.array(fit)
mcmc_hist(fit_array)
# И ещё один красивый рисунок!
mcmc_trace(fit_array)
par_prior <- rstan::extract(fit_prior, "b")$p
library("shinystan")
launch_shinystan(fit)
md <- stan_demo(
)
md <- stan_demo()
